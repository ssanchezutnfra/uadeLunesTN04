Clase 04: 
=========


  

React:
======

¿Por que no usar html, css, js, bootstrap y utilizar react o angular?
HTML/CSS/JS + Bootstrap para:
- Mantenimiento y Escalabilidad Difícil
- Gestión Manual del Estado: Con JS puro, el estado (datos dinámicos) se gestiona manualmente
- Bajo Rendimiento en Apps Complejas, actualizar el DOM manualmente es costoso
- Código No Reutilizable



Herramientas que vamos a utilizar:
- Gestión de dependencias (npm). Gestor de paquetes para JavaScript, para instalar librerías/frameworks. instalar 
- Bundling y desarrollo rápido (Vite). Herramienta acelera el desarrollo con librerías/frameworks.
- Bootstrap librería CSS. Librería de CSS/JS para acelerar el diseño de una UI


Intro React: 
https://es.react.dev/
La librería JavaScript (facebook)  para interfaces de usuario web y nativas
Podes crear UI para paginas web, moviles, escritorio.

Características de React:
- basado en componentes, ver ej: https://www.mercadolibre.com.ar/
  ui con componentes que se repiten, haces tu página con piezas que se reutilizan, 
  si modificas una se modifican todas las reutilizaciones del compo
  Vue, Angular y React trabajan con componentes 
- usa el Virtual DOM para actualizar solo las partes necesarias de la interfaz, reduciendo el costo de operaciones en el DOM real.

Código abierto: desde 2013
https://github.com/facebook/react

¿Por que utilizar React? Angular, Vue, Svelte
- el más demandado: facebook, twitter, instagram, mercadolibre, ws web, 
- se puede aplicar a moviles con React Native (microsoft), contadorReact.jsx
- comunidad https://npmtrends.com/


Crear un proyecto React:
=======================
create-react-app https://create-react-app.dev/docs/getting-started/
lenta, se quedó atrás

Vite, rapido (Vue, Svelte): cr
Vite es un herramienta de construcción (build tool) ultrarrápida y moderna diseñada para simplificar y optimizar el desarrollo de aplicaciones web, incluyendo proyectos con React. velocidad y configuración mínima.
https://vite.dev/guide/

crear proyecto react 
npm create vite@latest 
nombre del proyecto
React
JavaScript 


posicionarse en carpeta del proyecto
cd hola-react
npm install
npm run dev

ver proyecto 
http://localhost:5173/

inspeccionar index.html -> main.jsx -> app.jsx
upd app.jsx


mostrar como se define un componente 
ej https://es.re  act.dev/

ej1
construir interfaces de usuario a partir de piezas individuales o componentes
 
ej2 + onoff
componente: funcion js que devuelve html (xml): js+xml -> jsx 
xml lenguaje de marcado para transportar y almacenar datos
dentro de las {} se ejecuta js

react 
Más declarativo (describe qué debe pasar en lugar de cómo hacerlo)
El estado está encapsulado en el componente
Más fácil de extender y mantener
Mejor rendimiento con el Virtual DOM de React

ej3, comparar con pelis.js
estados: Cuando se modifica el estado (valor de la variable) se vuelve a renderizar el componente 
useState es un Hook en React que te permite añadir estado a tus componentes funcionales. 




componentes se nombran PascalCase -> para que no se confunda con html 
PascalCase react 
camelCase java 
snake_case base datos 
Kebab-case css 

construir primer componente Card
instalar github copilot.
activar agente setting - chat.agent.enable
style inline como objetos
las clases de style se llaman className en lugar de class, en js class en palabra reservada
se puede usar bootstrap, tailwind css, chakra

https://chakra-ui.com/
gama de componentes de UI listos para usar, como botones, inputs, modales, tablas, 

corrección de componenten -> aplica a todos

props:
datos se pasan de un componente padre a sus componentes hijos
también se pueden enviar funciones
props no se pueden modificar 

props children 
se pueden enviar texto o elementos html 
children componente -> hace más reutilizable el componente 

valor x defecto

dif entre componentes y elementos html 


estados:
estado (valor de variable), si cambia el valor se renderiza de nuevo el componente 


hooks utilidades
da funcionalidad al componente en sus diferentes partes

useState
variable, el setter
const [count, setCount] = useState(0);
count:
Es la variable de estado que almacena el valor actual (en este caso, el valor inicial es 0).

setCount:
Es la función que actualiza count y dispara un re-renderizado del componente.

estado separado por cada componente, 

es declarativo y imperativo
decla: quiero ver esto si es true, sino esto, se declara la ui
Se enfoca en el "qué" en lugar del "cómo
Oculta los detalles de bajo nivel
cada cambio de estado, reacciona y lo refleja en la ui

impera:hace esto, lo otro, etc 
indicar que hacer, que parte del código debo modificar 

dom Virtual: solo modifica en html es el componente, la parte del componente
comparar html + inspect 
foto de dom, 
compara dom y su vdom, solo modifica lo necesario
si se actuliza el padre se actualizan los hijos



=========================================

ESLint es una herramienta de linting para JavaScript (y tecnologías relacionadas como TypeScript, JSX y frameworks como React, Vue o Angular). Su función principal es analizar tu código en busca de errores, patrones sospechosos o inconsistencias de estilo, ayudando a mantener un código limpio, legible y libre de errores comunes

package.json es el corazón de la configuración del proyecto, donde se definen todas las dependencias necesarias para el desarrollo y producción
dependencies
react	Biblioteca central de React para crear componentes.
react-dom	Permite renderizar componentes React en el navegador.

devDependencies
Son herramientas necesarias solo durante el desarrollo (no se incluyen en el build de producción).

Dependencia	Propósito
vite	El núcleo del servidor de desarrollo y bundler.
@vitejs/plugin-react	Soporte para React (JSX, Fast Refresh).
eslint	Linter para detectar errores y mantener estilo de código.
eslint-plugin-react	Reglas específicas de ESLint para React.
prettier	Formateador de código (opcional, pero recomendado).
typescript	Si usas TypeScript (opcional).






Ejemplo de Manipulación de DOM sin react
Ejemplo de Manipulación de DOM con react



JSX: JavaScript XML
===
se transpila a js
extensión de js, escribis un xml 










Ventajas:
  1. Reutilización de Código componentes
  2. Encapsulamiento y Mantenibilidad
    Cada componente maneja su propio estado (valores de variables, cuando cambia el valor de una variable se re-renderiza el componente) y lógica, haciendo el código más fácil de mantener: menos acoplamiento, problemas aislados, cambios localizados
  3. Rendimiento Optimizado
    React usa el Virtual DOM para actualizar solo las partes necesarias de la UI, evitando recargas completas de página.
    Ejemplo: Si un componente hijo cambia, React no re-renderiza toda la aplicación, solo ese componente.
  4. Desarrollo Multiplataforma
    Los componentes de React pueden usarse en:
    Web (React DOM).
    Móvil (React Native).
    Escritorio (React Native for Windows).
  6. Flujo de Datos Predictivo
  React sigue un flujo unidireccional de datos (de padres a hijos), lo que hace más fácil:
  Rastrear cambios, evitar efectos secundarios no deseados como Angular
  7. JSX: HTML + JavaScript
  Combina lógica y marcado en un mismo lugar de forma declarativa .



================================
Ejemplos de React: https://es.react.dev/

dependencias
react 
react.dom

HMR (Hot Module Replacement)   




Librería (Library):
Conjunto de funciones, componentes o código preescrito que llamas y controlas desde tu aplicación.
Decido cuándo y cómo usarla (ej: llamar una función para validar un formulario).
No impone una estructura en tu proyecto o metodología de trabajo.
Ej: Es como usar herramientas sueltas de una caja (ej: un martillo, un destornillador).
React (UI components). facebook


Framework:
Conjunto de herramientas y reglas que define la estructura y flujo de tu aplicación.
Él controla el flujo y llama a tu código cuando es necesario (Inversión de Control - IoC).
Obliga a seguir una arquitectura específica (ej: MVC, componentes).
Es como usar un molde o esqueleto que ya tiene espacios para tus piezas.
Ej: sería como comprar un kit completo de mueble prefabricado que ya incluye todas las piezas, instrucciones paso a paso y hasta las herramientas específicas necesarias para ensamblarlo.
Angular (framework completo). google



================================
Ejemplos de React: https://es.react.dev/

dependencias
react 
react.dom

HMR (Hot Module Replacement)   
